<script>

	// Full list of configuration options available here:
	// https://github.com/hakimel/reveal.js#configuration
	Reveal.initialize({
		controls: false,
		progress: true,
		history: true,
		center: false,

		transition: 'linear',
		backgroundTransition: 'slide',

		width: 1024,
		height: 768,

		// Parallax scrolling
		// parallaxBackgroundImage: 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg',
		// parallaxBackgroundSize: '2100px 900px',

		// Optional libraries used to extend on reveal.js
		dependencies: [
			{ src: 'lib/revealjs/lib/js/classList.js', condition: function() { return !document.body.classList; } },
			{ src: 'lib/revealjs/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
			{ src: 'lib/revealjs/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
			{ src: 'lib/revealjs/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
			{ src: 'lib/revealjs/plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
			{ src: 'lib/revealjs/plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
		]
	});

	function updateSlideNumber() {
		var slNumber = document.querySelector('.slideNumber');

		slNumber.style.display = (event.indexh > 0) ? 'block' : 'none';
		slNumber.textContent = event.indexh;
	}

	Reveal.addEventListener('ready', updateSlideNumber);

	Reveal.addEventListener('slidechanged', updateSlideNumber);

	Reveal.addEventListener('slidechanged', function(e) {
		var player = e.currentSlide.querySelector('video'),
				prevPlayer = e.previousSlide.querySelector('video'),
				delay = player.getAttribute('data-delay') || 0,
				timeout;

		function stop(player) {
			player.pause();
			player.currentTime = 0;
			window.clearTimeout(timeout);
		}

		if (player) {
			stop(player);

			timeout = window.setTimeout(function() {
				player.play();
			}, delay)
		}

		if (prevPlayer) {
			stop(prevPlayer);
		}
	});
</script>